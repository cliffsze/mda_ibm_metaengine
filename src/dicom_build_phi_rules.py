import os
import datetime
import ConfigParser
import collections
import csv


# Filename : dicom_build_phi_rules.py
# Purpose  : construct phi rules py file
# Params   :
#
# Inputs - cad_config.conf parameters:
#   [dicom]
#   source_dicom_dictionary
#   source_dicom_phi_rules
#
# Outputs - create executable rules file
#   dicom_phi_rules.py
#
# Change Log:
# 20150613 - initial release
#
#
# main program
#
#
# get configuration parameters
home_dir = os.path.dirname(os.path.realpath(__file__))
config_file = home_dir + '/' + 'cad_config.conf'
c = ConfigParser.SafeConfigParser()
c.read(config_file)
dicom_dictionary = c.get('dicom', 'source_dicom_dictionary')
dicom_phi_rules = c.get('dicom', 'source_dicom_phi_rules')
dicom_phi_rules_py = home_dir + "/dicom_phi_rules.py"
print "input files: " + home_dir + "/" + dicom_dictionary +", " + home_dir + "/" + dicom_phi_rules
print "output files: " + dicom_phi_rules_py


# read dicom dictionary file into dd dictionary
# Format: [Tag] [VR] [Name] [VM] [Version] - tab delimited
dd = collections.defaultdict(list)
f = open(dicom_dictionary,'r')

count = 0
for row in f:
    row = row.rstrip()
    row = row.lstrip()
    if len(row) == 0 or row[0] == '#':
        # skip blank line or comments
        pass
    else:
        # key = attribute name, value = entire row
        attr = row.split('\t')        
        dd[attr[2]].append(row)
        count += 1
        
f.close()
print dicom_dictionary + " - tags read: " + str(count)


# rename old rules file if exist - add date as file extension
now = datetime.datetime.now()
if os.path.isfile(dicom_phi_rules_py):
    ext = now.strftime('.%y%m%d.%H%M')
    renam = dicom_phi_rules_py + ext
    os.rename(dicom_phi_rules_py, renam)


# open new output file dicom_phi_rules_dict.py
fo = open(dicom_phi_rules_py,'w')
count = 0
py_header = (
    "# Filename : " + dicom_phi_rules_py + "\n" 
  + "# Purpose  : dicom phi rules auto generated by " + os.path.basename(__file__) + "\n"
  + "# Creation Date: " + str(now) + "\n\n"
  + "import collections\n"
  + "def init_phi_dict():\n"
  + "    dict = collections.defaultdict(list)\n")
fo.write(py_header)


# read dicom phi rules csv file
# Format: [Name],[IsPHI],[Anonymization Policy]
fi = open (dicom_phi_rules, 'r')
reader = csv.reader(fi)
for row in reader:
    
    # match the phi rule name to a dd item 
    name = row[0].rstrip()
    value = dd[name]

    if not value:
        # phi rule name does not match any dicom dictionary name
        fo.write("    # name not found: " + name + "\n")

    else:
        # set warning message if dicom dictionary has duplicate names
        comment = ''
        i = len(value)
        if i > 1:
            comment = "    # dicom.dic has " + str(i) + " tags with same name: " + name

        # extract attributes from matching dd line
        # Format: [Tag] [VR] [Name] [VM] [Version] - tab delimited
        attr = value[0].split('\t')
        tag = attr[0]
        vr  = attr[1]
        vm  = attr[3]
        version = ''
        if len(attr) > 4:
            version = attr[4]
        
        is_phi  = row[1].rstrip()
        anonymization_policy = row[2].rstrip()

        # format output list object
        # Format: [Name] [VR] [VM] [version] [is_phi] [anonymization_rule]
        out = list()
        #out.append(tag)
        out.append(name)
        out.append(vr)
        out.append(vm)
        out.append(version)
        out.append(is_phi)
        out.append(anonymization_policy)

        fo.write("    dict['" + tag + "'].append(")
        fo.write(str(out))
        fo.write(")\n")
        if len(comment) > 0:
            fo.write(comment + "\n")
        count += 1

fo.write("    return dict\n\n")
fo.write("# " + str(count) + " tags written\n")
print dicom_phi_rules_py + " - tags written: " + str(count)
fi.close()
fo.close()
